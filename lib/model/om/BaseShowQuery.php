<?php


/**
 * Base class that represents a query for the 'show' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4 on:
 *
 * Sat Jun 29 04:41:18 2013
 *
 * @method     ShowQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ShowQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     ShowQuery orderByCreators($order = Criteria::ASC) Order by the creators column
 * @method     ShowQuery orderByCast($order = Criteria::ASC) Order by the cast column
 * @method     ShowQuery orderByGenreId($order = Criteria::ASC) Order by the genre_id column
 * @method     ShowQuery orderByImage($order = Criteria::ASC) Order by the image column
 * @method     ShowQuery orderByStoryline($order = Criteria::ASC) Order by the storyline column
 * @method     ShowQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     ShowQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     ShowQuery groupById() Group by the id column
 * @method     ShowQuery groupByName() Group by the name column
 * @method     ShowQuery groupByCreators() Group by the creators column
 * @method     ShowQuery groupByCast() Group by the cast column
 * @method     ShowQuery groupByGenreId() Group by the genre_id column
 * @method     ShowQuery groupByImage() Group by the image column
 * @method     ShowQuery groupByStoryline() Group by the storyline column
 * @method     ShowQuery groupByCreatedAt() Group by the created_at column
 * @method     ShowQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     ShowQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ShowQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ShowQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ShowQuery leftJoinGenre($relationAlias = null) Adds a LEFT JOIN clause to the query using the Genre relation
 * @method     ShowQuery rightJoinGenre($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Genre relation
 * @method     ShowQuery innerJoinGenre($relationAlias = null) Adds a INNER JOIN clause to the query using the Genre relation
 *
 * @method     ShowQuery leftJoinEpisode($relationAlias = null) Adds a LEFT JOIN clause to the query using the Episode relation
 * @method     ShowQuery rightJoinEpisode($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Episode relation
 * @method     ShowQuery innerJoinEpisode($relationAlias = null) Adds a INNER JOIN clause to the query using the Episode relation
 *
 * @method     Show findOne(PropelPDO $con = null) Return the first Show matching the query
 * @method     Show findOneOrCreate(PropelPDO $con = null) Return the first Show matching the query, or a new Show object populated from the query conditions when no match is found
 *
 * @method     Show findOneById(int $id) Return the first Show filtered by the id column
 * @method     Show findOneByName(string $name) Return the first Show filtered by the name column
 * @method     Show findOneByCreators(string $creators) Return the first Show filtered by the creators column
 * @method     Show findOneByCast(string $cast) Return the first Show filtered by the cast column
 * @method     Show findOneByGenreId(int $genre_id) Return the first Show filtered by the genre_id column
 * @method     Show findOneByImage(string $image) Return the first Show filtered by the image column
 * @method     Show findOneByStoryline(string $storyline) Return the first Show filtered by the storyline column
 * @method     Show findOneByCreatedAt(string $created_at) Return the first Show filtered by the created_at column
 * @method     Show findOneByUpdatedAt(string $updated_at) Return the first Show filtered by the updated_at column
 *
 * @method     array findById(int $id) Return Show objects filtered by the id column
 * @method     array findByName(string $name) Return Show objects filtered by the name column
 * @method     array findByCreators(string $creators) Return Show objects filtered by the creators column
 * @method     array findByCast(string $cast) Return Show objects filtered by the cast column
 * @method     array findByGenreId(int $genre_id) Return Show objects filtered by the genre_id column
 * @method     array findByImage(string $image) Return Show objects filtered by the image column
 * @method     array findByStoryline(string $storyline) Return Show objects filtered by the storyline column
 * @method     array findByCreatedAt(string $created_at) Return Show objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return Show objects filtered by the updated_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseShowQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseShowQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Show', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ShowQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ShowQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ShowQuery) {
			return $criteria;
		}
		$query = new ShowQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Show|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = ShowPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(ShowPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Show A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID`, `NAME`, `CREATORS`, `CAST`, `GENRE_ID`, `IMAGE`, `STORYLINE`, `CREATED_AT`, `UPDATED_AT` FROM `show` WHERE `ID` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Show();
			$obj->hydrate($row);
			ShowPeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Show|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ShowPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ShowPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ShowPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the name column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
	 * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $name The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ShowPeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the creators column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCreators('fooValue');   // WHERE creators = 'fooValue'
	 * $query->filterByCreators('%fooValue%'); // WHERE creators LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $creators The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByCreators($creators = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($creators)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $creators)) {
				$creators = str_replace('*', '%', $creators);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ShowPeer::CREATORS, $creators, $comparison);
	}

	/**
	 * Filter the query on the cast column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCast('fooValue');   // WHERE cast = 'fooValue'
	 * $query->filterByCast('%fooValue%'); // WHERE cast LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $cast The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByCast($cast = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($cast)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $cast)) {
				$cast = str_replace('*', '%', $cast);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ShowPeer::CAST, $cast, $comparison);
	}

	/**
	 * Filter the query on the genre_id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByGenreId(1234); // WHERE genre_id = 1234
	 * $query->filterByGenreId(array(12, 34)); // WHERE genre_id IN (12, 34)
	 * $query->filterByGenreId(array('min' => 12)); // WHERE genre_id > 12
	 * </code>
	 *
	 * @see       filterByGenre()
	 *
	 * @param     mixed $genreId The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByGenreId($genreId = null, $comparison = null)
	{
		if (is_array($genreId)) {
			$useMinMax = false;
			if (isset($genreId['min'])) {
				$this->addUsingAlias(ShowPeer::GENRE_ID, $genreId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($genreId['max'])) {
				$this->addUsingAlias(ShowPeer::GENRE_ID, $genreId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ShowPeer::GENRE_ID, $genreId, $comparison);
	}

	/**
	 * Filter the query on the image column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByImage('fooValue');   // WHERE image = 'fooValue'
	 * $query->filterByImage('%fooValue%'); // WHERE image LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $image The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByImage($image = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($image)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $image)) {
				$image = str_replace('*', '%', $image);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ShowPeer::IMAGE, $image, $comparison);
	}

	/**
	 * Filter the query on the storyline column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByStoryline('fooValue');   // WHERE storyline = 'fooValue'
	 * $query->filterByStoryline('%fooValue%'); // WHERE storyline LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $storyline The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByStoryline($storyline = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($storyline)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $storyline)) {
				$storyline = str_replace('*', '%', $storyline);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ShowPeer::STORYLINE, $storyline, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
	 * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $createdAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(ShowPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(ShowPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ShowPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
	 * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $updatedAt The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(ShowPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(ShowPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ShowPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related Genre object
	 *
	 * @param     Genre|PropelCollection $genre The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByGenre($genre, $comparison = null)
	{
		if ($genre instanceof Genre) {
			return $this
				->addUsingAlias(ShowPeer::GENRE_ID, $genre->getId(), $comparison);
		} elseif ($genre instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ShowPeer::GENRE_ID, $genre->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByGenre() only accepts arguments of type Genre or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Genre relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function joinGenre($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Genre');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Genre');
		}

		return $this;
	}

	/**
	 * Use the Genre relation Genre object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    GenreQuery A secondary query class using the current class as primary query
	 */
	public function useGenreQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinGenre($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Genre', 'GenreQuery');
	}

	/**
	 * Filter the query by a related Episode object
	 *
	 * @param     Episode $episode  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function filterByEpisode($episode, $comparison = null)
	{
		if ($episode instanceof Episode) {
			return $this
				->addUsingAlias(ShowPeer::ID, $episode->getShow(), $comparison);
		} elseif ($episode instanceof PropelCollection) {
			return $this
				->useEpisodeQuery()
				->filterByPrimaryKeys($episode->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByEpisode() only accepts arguments of type Episode or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Episode relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function joinEpisode($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Episode');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Episode');
		}

		return $this;
	}

	/**
	 * Use the Episode relation Episode object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EpisodeQuery A secondary query class using the current class as primary query
	 */
	public function useEpisodeQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinEpisode($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Episode', 'EpisodeQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Show $show Object to remove from the list of results
	 *
	 * @return    ShowQuery The current query, for fluid interface
	 */
	public function prune($show = null)
	{
		if ($show) {
			$this->addUsingAlias(ShowPeer::ID, $show->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseShowQuery